services:
  postgres:
    image: postgres:16-alpine
    container_name: mkrew-postgres
    environment:
      POSTGRES_DB: mkrew
      POSTGRES_USER: mkrew
      POSTGRES_PASSWORD: mkrew123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mkrew-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mkrew -d mkrew"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  liquibase:
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: mkrew-liquibase
    environment:
      LIQUIBASE_COMMAND_URL: jdbc:postgresql://postgres:5432/mkrew
      LIQUIBASE_COMMAND_USERNAME: mkrew
      LIQUIBASE_COMMAND_PASSWORD: mkrew123
      LIQUIBASE_COMMAND_CHANGELOG_FILE: changelog/db.changelog-master.yaml
    volumes:
      - ./db/changelog/:/liquibase/changelog
    networks:
      - mkrew-network
    depends_on:
      postgres:
        condition: service_healthy
    command: ["update"]
    restart: on-failure

  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    container_name: mkrew-scraper
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/mkrew
      SPRING_DATASOURCE_USERNAME: mkrew
      SPRING_DATASOURCE_PASSWORD: mkrew123
      SCRAPER_API_KEY: ${SCRAPER_API_KEY:-change-this-secure-api-key-in-production-mkrew-scraper-2024}
    # Network isolation: scraper port NOT exposed to host, only accessible within Docker network
    expose:
      - "8080"
    networks:
      - mkrew-network
    depends_on:
      postgres:
        condition: service_healthy
      liquibase:
        condition: service_completed_successfully
    restart: unless-stopped

  ml:
    build:
      context: ./ml
      dockerfile: Dockerfile
    container_name: mkrew-ml
    environment:
      PORT: 5000
      FLASK_ENV: production
      DEBUG: "False"
      ML_API_KEY: ${ML_API_KEY:-change-this-secure-api-key-in-production-mkrew-ml-2024}
    # Network isolation: ML port NOT exposed to host, only accessible within Docker network
    expose:
      - "5000"
    networks:
      - mkrew-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mkrew-backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/mkrew
      SPRING_DATASOURCE_USERNAME: mkrew
      SPRING_DATASOURCE_PASSWORD: mkrew123
      JWT_SECRET: your-256-bit-secret-key-change-this-in-production-mkrew-blood-inventory-system
      JWT_EXPIRATION: 86400000
      SCRAPER_SERVICE_URL: http://scraper:8080
      SCRAPER_API_KEY: ${SCRAPER_API_KEY:-change-this-secure-api-key-in-production-mkrew-scraper-2024}
      ML_SERVICE_URL: http://ml:5000
      ML_API_KEY: ${ML_API_KEY:-change-this-secure-api-key-in-production-mkrew-ml-2024}
    ports:
      - "8081:8081"
    networks:
      - mkrew-network
    depends_on:
      postgres:
        condition: service_healthy
      liquibase:
        condition: service_completed_successfully
      scraper:
        condition: service_started
      ml:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mkrew-frontend
    ports:
      - "4321:4321"
    networks:
      - mkrew-network
    depends_on:
      - backend
    restart: unless-stopped

networks:
  mkrew-network:
    driver: bridge

volumes:
  postgres_data:
