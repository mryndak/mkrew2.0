# Cloud Build configuration for Backend API deployment to Cloud Run
# This pipeline builds backend, runs migrations, and deploys with Cloud SQL integration

steps:
  # Step 1: Build backend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend-image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/mkrew-backend:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/mkrew-backend:latest'
      - '-f'
      - 'backend/Dockerfile'
      - 'backend/'

  # Step 2: Push image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend-image'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/mkrew-backend:$BUILD_ID'
    waitFor: ['build-backend-image']

  # Step 3: Run database migrations (Liquibase)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'run-database-migrations'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running database migrations..."
        # Download Cloud SQL Proxy
        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
        chmod +x cloud_sql_proxy

        # Start Cloud SQL Proxy in background
        ./cloud_sql_proxy -instances=${_CLOUD_SQL_INSTANCE}=tcp:5432 &
        PROXY_PID=$!

        # Wait for proxy
        sleep 5

        # Run Liquibase migrations
        docker run --rm \
          --network=cloudbuild \
          -v $(pwd)/db/changelog:/liquibase/changelog \
          gcr.io/$PROJECT_ID/mkrew-liquibase:latest \
          --url="jdbc:postgresql://host.docker.internal:5432/${_DB_NAME}" \
          --username="${_DB_USER}" \
          --password="${_DB_PASSWORD}" \
          --changelog-file=changelog/db.changelog-master.yaml \
          update

        # Stop proxy
        kill $PROXY_PID

        echo "Database migrations completed"
    waitFor: ['push-backend-image']
    secretEnv: ['DB_PASSWORD']

  # Step 4: Deploy backend to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-backend-to-cloud-run'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'mkrew-backend-${_ENVIRONMENT}'
      - '--image'
      - 'gcr.io/$PROJECT_ID/mkrew-backend:$BUILD_ID'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'  # Public API (JWT handles auth)
      - '--service-account'
      - 'mkrew-backend-sa@$PROJECT_ID.iam.gserviceaccount.com'
      - '--add-cloudsql-instances'
      - '${_CLOUD_SQL_INSTANCE}'
      - '--set-env-vars'
      - |
        PORT=8080,
        SPRING_PROFILES_ACTIVE=gcp,
        SPRING_DATASOURCE_URL=jdbc:postgresql:///${_DB_NAME}?cloudSqlInstance=${_CLOUD_SQL_INSTANCE}&socketFactory=com.google.cloud.sql.postgres.SocketFactory&user=${_DB_USER}&password=${_DB_PASSWORD},
        SCRAPER_SERVICE_URL=${_SCRAPER_URL},
        ML_SERVICE_URL=${_ML_SERVICE_URL}
      - '--set-secrets'
      - |
        JWT_SECRET=mkrew-jwt-secret:latest,
        SCRAPER_API_KEY=mkrew-scraper-api-key:latest,
        ML_API_KEY=mkrew-ml-api-key:latest
      - '--memory'
      - '${_MEMORY}'
      - '--cpu'
      - '${_CPU}'
      - '--timeout'
      - '300s'
      - '--max-instances'
      - '${_MAX_INSTANCES}'
      - '--min-instances'
      - '${_MIN_INSTANCES}'
      - '--concurrency'
      - '80'
    waitFor: ['run-database-migrations']

  # Step 5: Grant backend permission to invoke ML service
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'grant-ml-access'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Granting backend access to ML service..."
        gcloud run services add-iam-policy-binding mkrew-ml-${_ENVIRONMENT} \
          --region=${_REGION} \
          --member="serviceAccount:mkrew-backend-sa@$PROJECT_ID.iam.gserviceaccount.com" \
          --role="roles/run.invoker" \
          || echo "ML service not found or already configured"
    waitFor: ['deploy-backend-to-cloud-run']

  # Step 6: Get and display service URL
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'get-backend-url'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$(gcloud run services describe mkrew-backend-${_ENVIRONMENT} \
          --region=${_REGION} \
          --format='value(status.url)')
        echo "Backend API deployed at: $SERVICE_URL"
        echo "Health: $SERVICE_URL/actuator/health"
        echo "API Docs: $SERVICE_URL/swagger-ui.html"
        echo "$SERVICE_URL" > /workspace/backend-service-url.txt
    waitFor: ['grant-ml-access']

  # Step 7: Test health endpoint
  - name: 'gcr.io/cloud-builders/curl'
    id: 'test-backend-health'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$(cat /workspace/backend-service-url.txt)
        echo "Testing backend health endpoint..."

        # Wait for service to be ready
        for i in {1..30}; do
          if curl -f "$SERVICE_URL/actuator/health" 2>/dev/null; then
            echo "Health check passed!"
            exit 0
          fi
          echo "Waiting for service... ($i/30)"
          sleep 10
        done

        echo "Health check timeout"
        exit 1
    waitFor: ['get-backend-url']

  # Step 8: Push latest tag
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-latest-tag'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/mkrew-backend:latest'
    waitFor: ['test-backend-health']

# Store images in Container Registry
images:
  - 'gcr.io/$PROJECT_ID/mkrew-backend:$BUILD_ID'
  - 'gcr.io/$PROJECT_ID/mkrew-backend:latest'

# Secrets from Secret Manager
availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/mkrew-db-password/versions/latest
      env: 'DB_PASSWORD'

# Substitution variables
substitutions:
  _ENVIRONMENT: 'dev'
  _REGION: 'europe-central2'
  _CLOUD_SQL_INSTANCE: 'project-id:region:instance-name'
  _DB_NAME: 'mkrew'
  _DB_USER: 'mkrew'
  _SCRAPER_URL: 'http://mkrew-scraper-dev:8080'  # Internal scraper URL
  _ML_SERVICE_URL: 'https://mkrew-ml-dev-xxxxx.run.app'  # ML Cloud Run URL
  _MEMORY: '1Gi'
  _CPU: '2'
  _MAX_INSTANCES: '10'
  _MIN_INSTANCES: '1'

options:
  machineType: 'E2_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

timeout: '2400s'  # 40 minutes
